- name: Install nodejs TLS
  shell: curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
  become: yes

- name: Install the nodejs,redis,rabbitmq
  apt:
    name: ['nodejs','nginx-extras','redis-server','rabbitmq-server']
    state: present  

- name: Add onlyoffice gpg keys
  apt_key:
    keyserver: "keyserver.ubuntu.com"
    id: "8320CA65CB2DE8E5"
    state: present
  become: yes

- name: Add onlyoffice repositories
  apt_repository:
    repo: "{{ package_repo }}"
    state: present
  become: yes

- name: Add debian contrib repositories
  apt_repository:
    repo: "{{ debian_repo }}"
    state: present
  when: ansible_distribution == "Debian"
  become: yes

- name: Say 'yes' to ttf-mscorefonts-installer
  debconf:
    name: ttf-mscorefonts-installer
    question: msttcorefonts/accepted-mscorefonts-eula
    value: true
    vtype: boolean
  become: yes
    
- name: Accept license
  debconf:
    name: "{{ package_name }}"
    question: onlyoffice/accepted-onlyoffice-license
    value: 'true'
    vtype: boolean

# +======================================+
# +           POSTGRESQL                 +

- name: INSTALLING POSTGRESQL
  apt:
    name: "postgresql"
    state: present
    update_cache: yes
  become: yes
  when: dbtype == "p"

- name: Creating database
  shell: sudo -u postgres psql -c "CREATE DATABASE onlyoffice;"
  become: yes
  register: out
  failed_when: out.rc != 0 and 'already exists' not in out.stderr
  when: dbtype == "p"

- name: Creating user
  shell: sudo -u postgres psql -c "CREATE USER onlyoffice WITH password 'onlyoffice';"
  become: yes
  register: out
  failed_when: out.rc != 0 and 'already exists' not in out.stderr
  when: dbtype == "p"

- name: Granting access
  shell: sudo -u postgres psql -c "GRANT ALL privileges ON DATABASE onlyoffice TO onlyoffice;"
  become: yes
  when: dbtype == "p"

# +======================================+
# +              MYSQL                   +

- name: INCLUDE MYSQL 
  include_tasks: "{{autocloud_dir}}/roles/mysql/tasks/main.yaml"
  when: dbtype == "k"

- name: Creating db for onlyoffice
  mysql_db:
    login_user: root
    login_password: root
    db: onlyoffice
    state: present
  when: dbtype == "k"

- name: Creating user for onlyoffice
  mysql_user:
    user: onlyoffice
    password: onlyoffice
    state: present
  when: dbtype == "k"

- name: giving permissions
  mysql_user:
    name: onlyoffice
    priv: "onlyoffice.*:ALL,GRANT"
    state: present
  when: dbtype == "k"

# +======================================+

- name: Set up db host name
  debconf:
    name: "{{ package_name }}"
    question: onlyoffice/db-host
    value: "localhost"
    vtype: string

- name: Set up db name
  debconf:
    name: "{{ package_name }}"
    question: onlyoffice/db-name
    value: "onlyoffice"
    vtype: string

- name: Set up db user
  debconf:
    name: "{{ package_name }}"
    question: onlyoffice/db-user
    value: onlyoffice
    vtype: string

- name: Set up db user password
  debconf:
    name: "{{ package_name }}"
    question: onlyoffice/db-pwd
    value: onlyoffice
    vtype: password

- name: Install documentserver
  apt: 
    name: "{{ package_name }}"
    update_cache: yes
    state: latest
  become: yes

- name: Checking folder
  stat:
    path: /var/www/onlyoffice/ssl
  register: ssloffice_check
  when: state == "l"

- name: Creating ssl folder
  file:
    path: /var/www/onlyoffice/ssl
    state: directory
  become: yes
  when: state == "l"

- name: Setting up SSLCertficate file
  template:
    src: "{{autocloud_dir}}/ssl/onlyoffice.crt"
    dest: "/var/www/onlyoffice/ssl/onlyoffice.crt"
  when: state == "l"

- name: Setting up SSLCertificateKey file
  template:
    src: "{{autocloud_dir}}/ssl/onlyoffice.key"
    dest: "/var/www/onlyoffice/ssl/onlyoffice.key"
  when: state == "l"

- name: Setting up Nginx Configuration
  template:
    src: "{{autocloud_dir}}/roles/onlyoffice/templates/onlyoffice-documentserver-local.conf"
    dest: "/etc/nginx/conf.d/onlyoffice-documentserver.conf"
  become: yes
  when: state == "l" and webserver == "n"

#- name: Setting up Nginx Configuration
#  template:
#    src: "{{autocloud_dir}}/roles/onlyoffice/templates/onlyoffice-documentserver-official.conf"
#    dest: "/etc/nginx/conf.d/onlyoffice-documentserver.conf"
#  become: yes
#  when: state == "o" and webserver == "n"

- name: Stop nginx
  shell: systemctl stop nginx
  become: yes
  when: webserver == "n"

- name: Setting up SSL
  command: letsencrypt --authenticator standalone --installer nginx -d {{onlyoffice_domain}} --email {{email}}--agree-tos -n --no-verify-ssl --redirect
  become: yes
  when: state == "o"

- name: Restarting Nginx
  shell: systemctl restart nginx
  become: yes
  when: webserver == "n"

- name: Setting up nextcloud Config file
  template:
    src: "{{autocloud_dir}}/roles/onlyoffice/templates/nc-config.php"
    dest: "/var/www/nextcloud/config/config.php"
  when: onlyoffice_with_nextcloud == 1 and state == "l"

- name: Set up redis host name
  shell: "{{ json }} -I -e 'this.services.CoAuthoring.redis.host  = \"{{ redis_server_host }}\"'"
  when: redis_server_host != ""
  notify: restart-ds

- name: Set up redis port number
  shell: "{{ json }} -I -e 'this.services.CoAuthoring.redis.port  = \"{{ redis_server_port }}\"'"
  when: redis_server_port != ""
  notify: restart-ds

- name: Set up rabbitmq url
  shell: "{{ json }} -I -e 'this.rabbitmq.url = \"{{ rabbitmq_server_url }}\"'"
  when: rabbitmq_server_url != ""
  notify: restart-ds

- name: Creagting dhparam
  shell: cd /etc/ssl/certs && openssl dhparam -out dhparam.pem 4096
  become: yes

- name: Installing onlyoffice app
  shell: sudo -u www-data php occ app:install onlyoffice
  args:
    chdir: /var/wwww/nextcloud/
  when: onlyoffice_with_nextcloud == 1

- name: Enabling onlyoffice app
  shell: sudo -u www-data php occ app:enable onlyoffice
  args:
    chdir: /var/www/nextcloud/
  when: onlyoffice_with_nextcloud == 1

- name: Setting up the domain
  shell: sudo -u www-data php occ config:app:set onlyoffice serverurl --value="{{onlyoffice_domain}}"
  args:
    chdir: /var/www/nextcloud/
  when: onlyoffice_with_nextcloud == 1