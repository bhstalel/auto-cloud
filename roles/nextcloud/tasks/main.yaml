- name: INSTALLING NGINX
  apt:
    name: "nginx"
    state: present
    update_cache: yes
  become: yes
  when: webserver == "n"

- name: INSTALLING APACHE2
  apt:
    name: "apache2"
    state: present
    update_cache: yes
  become: yes
  when: webserver == "a"

- name: INCLUDE PHP 
  include_tasks: "{{autocloud_dir}}/roles/php/tasks/main.yml"

- name: START FPM-PHP
  systemd:
    name: "php{{php_version}}-fpm"
    daemon_reload: yes
    state: restarted
    enabled: True
  become: yes

- name: Checking postgresql
  command: dpkq-query -l postgresql
  register: postgres_check
  when: dbtype == "p"

- name: INSTALLING POSTGRESQL
  apt:
    name: "postgresql"
    state: present
    update_cache: yes
  become: yes
  when: dbtype == "p" and postgres_check.stdout.find('no packages found') != -1

- name: CREATING DB USER POSTGRESQL
  shell: sudo -u postgres psql -c "CREATE USER {{nextcloud_username}} WITH password '{{nextcloud_userpass}}'";
  become: yes
  register: out
  failed_when: out.rc != 0 and 'already exists' not in out.stderr
  when: dbtype == "p"

- name: CREATING DB POSTGRESQL
  shell: sudo -u postgres psql -c "CREATE DATABASE nextcloud WITH owner '{{nextcloud_username}}';";
  become: yes
  register: out
  failed_when: out.rc != 0 and 'already exists' not in out.stderr
  when: dbtype == "p"

- name: INCLUDE MYSQL 
  include_tasks: "{{autocloud_dir}}/roles/mysql/tasks/main.yaml"
  when: dbtype == "m"

- name: Creating db for nextcloud
  mysql_db:
    login_user: root
    login_password: root
    db: nextcloud
    state: present
  when: dbtype == "m"

- name: Creating user for nextcloud
  mysql_user:
    user: "{{nextcloud_username}}"
    password: "{{nextcloud_userpass}}"
    state: present
  when: dbtype == "m"

- name: giving permissions
  mysql_user:
    name: "{{nextcloud_username}}"
    priv: "nextcloud.*:ALL,GRANT"
    state: present
  when: dbtype == "m"

- name: DOWNLOADING NEXTCLOUD
  get_url:
    url: https://download.nextcloud.com/server/releases/nextcloud-15.0.2.zip
    dest: /tmp/nextcloud-15.0.2.zip

- name: CREATING NEXTCLOUD DIR
  file:
    path: /var/www
    state: directory
    owner: www-data
    group: www-data
  become: yes

- name: CHECKING NEXTCLOUD DIR
  stat:
      path: /var/www/nextcloud
  register: stat_result
  become: yes

- name: EXTRACTING
  unarchive:
    src: /tmp/nextcloud-15.0.2.zip
    dest: /var/www
    copy: no
    owner: www-data
    group: www-data
  become: yes
  when: stat_result.stat.exists == False

- name: GENERATING NGINX CONF
  template:
    src: "roles/nextcloud/templates/nginx-local.conf.tpl"
    dest: "/etc/nginx/sites-available/{{nextcloud_domain}}.conf"
    owner: www-data
    group: www-data
  become: yes
  when: state == "l" and webserver == "n"

- name: GENERATING NGINX CONF
  template:
    src: "roles/nextcloud/templates/nginx-official.conf.tpl"
    dest: "/etc/nginx/sites-available/{{nextcloud_domain}}.conf"
    owner: www-data
    group: www-data
  become: yes
  when: state == "o" and webserver == "n"

- name: CHECKING /etc/nginx/ssl
  stat:
   path: /etc/nginx/ssl
  register: folder_stat
  when: state == "l" and webserver == "n"

- name: CREATING /etc/nginx/ssl
  file:
   path: /etc/nginx/ssl
   state: directory
  when: state == "l" and folder_stat.stat.exists == false and webserver == "n"

- name: COPYING SSLCertificate FILE
  template:
    src: "ssl/nextcloud.crt"
    dest: "/etc/nginx/ssl/nextcloud.crt"
  become: yes
  when: state == "l" and webserver == "n"

- name: COPYING SSLCertificateKey FILE
  template:
    src: "ssl/nextcloud.key"
    dest: "/etc/nginx/ssl/nextcloud.key"
  become: yes
  when: state == "l" and webserver == "n"

- name: Generating SSL Certificate
  shell: letsencrypt --authenticator standalone --installer nginx -d {{nextcloud_domain}} --email {{email}} --agree-tos -n --no-verify-ssl --pre-hook "sudo systemctl stop nginx" --post-hook "sudo systemctl start nginx" --redirect
  when: state == "o" and webserver == "n"

- name: Changing values
  shell: mv {{nextcloud_domain}}* {{nextcloud_domain}}
    chdir: /etc/letsencrypt/live/
  become: yes
  when: state == "o"

- name: ACTIVATING NEXTCLOUD SITE
  file: 
    src: "/etc/nginx/sites-available/nextcloud.conf"
    dest: "/etc/nginx/sites-enabled/nextcloud.conf"
    state: link
  when: webserver == "n"

- name: RESTARTING NGINX
  shell: systemctl restart nginx
  when: webserver == "n"

- name: Installing ufw
  apt:
    name: ufw
    state: present
    update_cache: yes
  become: yes

- name: Enabling ufw
  shell: ufw enable

- name: Add ufw rule
  sudo: yes
  command: ufw allow 80,443/tcp