
# ---------- Nginx ---------- #

- name: (nginx) Checking installation
  shell: dpkg-query -W -f='${Status}' nginx | grep 'install ok installed'
  register: is_installed
  failed_when: no
  changed_when: no

- name: (nginx) Installing nginx
  apt:
    name: nginx
    state: present
    update_cache: yes
  become: yes
  when: is_installed.rc == -1

# ---------- php ---------- #

- name: (php) Calling Role
  include_tasks: "{{autocloud_dir}}/bin/roles/php/tasks/main.yml"

- name: (php) Starting php-fpm
  systemd:
    name: "php7.2-fpm"
    daemon_reload: yes
    state: restarted
    enabled: True
  become: yes

# ---------- MySQL ---------- #

- name: (MySQL) Calling Role
  include_tasks: "{{autocloud_dir}}/bin/roles/mysql/tasks/main.yaml"

- name: (MySQL) Creating Database
  mysql_db:
    login_user: "{{nextcloud_db_user}}"
    login_password: "{{nextcloud_db_password}}"
    db: "{{nextcloud_db_name}}"
    state: present

- name: (MySQL) Creating nextcloud user
  mysql_user:
    user: "{{nextcloud_username}}"
    password: "{{nextcloud_userpass}}"
    state: present

- name: (MySQL) Giving permissions
  mysql_user:
    name: "{{nextcloud_username}}"
    priv: "nextcloud.*:ALL,GRANT"
    state: present

# ---------- nextcloud ---------- #

- name: (nextcloud) Downloading package
  get_url:
    url: "{{nextcloud_package_link}}"
    dest: /tmp/nextcloud.zip

- name: (nextcloud) Creating destination directory
  file:
    path: /var/www
    state: directory
    owner: www-data
    group: www-data
  become: yes

- name: (nextcloud) Checking for previous installation
  stat:
      path: /var/www/nextcloud
  register: stat_result
  become: yes

- name: (nextcloud) Removing old installation
  shell: rm -r /var/www/nextcloud
  become: yes
  when: stat_result.stat.exists == True

- name: (nextcloud) Extracting package
  unarchive:
    src: /tmp/nextcloud.zip
    dest: /var/www
    copy: no
    owner: www-data
    group: www-data
  become: yes

- name: (nextcloud) Generating nginx configuration
  template:
    src: "{{autocloud_dir}}/bin/roles/nextcloud/templates/nginx-local.conf.tpl"
    dest: "/etc/nginx/conf.d/{{nextcloud_domain}}.conf"
    owner: www-data
    group: www-data
  become: yes

- name: (nextcloud) Restarting nginx
  ansible.builtin.systemd:
    name: nginx
    state: restarted
  become: yes

# ---------- SSL/TLS ---------- #

#- name: CHECKING /etc/nginx/ssl
#  stat:
#   path: /etc/nginx/ssl
#  register: folder_stat
#  when: state == "l" and webserver == "n"

#- name: CREATING /etc/nginx/ssl
#  file:
#   path: /etc/nginx/ssl
#   state: directory
#  when: state == "l" and folder_stat.stat.exists == false and webserver == "n"

#- name: COPYING SSLCertificate FILE
#  template:
#    src: "ssl/nextcloud.crt"
#    dest: "/etc/nginx/ssl/nextcloud.crt"
#  become: yes
#  when: state == "l" and webserver == "n"

#- name: COPYING SSLCertificateKey FILE
#  template:
#    src: "ssl/nextcloud.key"
#    dest: "/etc/nginx/ssl/nextcloud.key"
#  become: yes
#  when: state == "l" and webserver == "n"

#- name: STOPPING NGINX
#  shell: systemctl stop nginx
#  when: webserver == "n"

#- name: Generating SSL Certificate
#  shell: letsencrypt --authenticator standalone --installer nginx -d {{nextcloud_domain}} --email {{email}} --agree-tos -n --no-verify-ssl --redirect
#  when: state == "o" and webserver == "n"

#- name: Changing values
#  shell: mv /etc/letsencrypt/live/{{nextcloud_domain}}* /etc/letsencrypt/live/{{nextcloud_domain}}
#  become: yes
#  when: state == "o"

#- name: STARTING NGINX
#  shell: systemctl start nginx
#  when: webserver == "n"

#- name: RESTARTING NGINX
#  shell: systemctl restart nginx
#  when: webserver == "n"

# ---------- Firewall ---------- #

- name: (ufw) Checking installation
  shell: dpkg-query -W -f='${Status}' ufw | grep 'install ok installed'
  register: is_installed
  failed_when: no
  changed_when: no

- name: (ufw) Installing
  apt:
    name: ufw
    state: present
    update_cache: yes
  become: yes
  when: is_installed.rc == -1

- name: (ufw) Enabling
  shell: ufw enable

#- name: (ufw) Adding 80/443 rule
#  sudo: yes
#  command: ufw allow 80,443/tcp